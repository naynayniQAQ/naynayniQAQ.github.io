<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Dubbo</title>
      <link href="/2023/09/17/Dubbo/"/>
      <url>/2023/09/17/Dubbo/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/2023/09/11/redis/"/>
      <url>/2023/09/11/redis/</url>
      
        <content type="html"><![CDATA[<h3 id="redis是什么？为什么快？"><a href="#redis是什么？为什么快？" class="headerlink" title="redis是什么？为什么快？"></a>redis是什么？为什么快？</h3><ul><li>基于缓存的Nosql数据库，K,V结构</li><li>单线程</li><li>内部使用了其他数据结构：SDS,zipList,skipList等等<br>redis-server -v 查询redis版本</li></ul><h3 id="常见数据类型"><a href="#常见数据类型" class="headerlink" title="常见数据类型"></a>常见数据类型</h3><ul><li>String：缓存、token过期时间、计数相关的</li><li>Hash：分布式锁</li><li>List：有序并可重复的列表。时间线场景</li><li>Set：无序，元素不可重复，会覆盖。对并集、交集、差集的操作适用于抽奖、共同好友</li><li>Zset：有序不可重复，排行榜</li><li>BitMap：位图，适用于浏览过xx的场景</li></ul><h3 id="redis如何实现分布式锁？"><a href="#redis如何实现分布式锁？" class="headerlink" title="redis如何实现分布式锁？"></a>redis如何实现分布式锁？</h3><h3 id="锁失效，过期时间到了，但是业务代码还没执行完，怎么办？"><a href="#锁失效，过期时间到了，但是业务代码还没执行完，怎么办？" class="headerlink" title="锁失效，过期时间到了，但是业务代码还没执行完，怎么办？"></a>锁失效，过期时间到了，但是业务代码还没执行完，怎么办？</h3><ul><li>看门狗机制，判断当先线程是否存在，释放时间&#x3D;-1，给其设置过期时间，通过轮询不断地进行自旋判断，直到线程释放锁。</li></ul><h3 id="Redis整体的数据结构"><a href="#Redis整体的数据结构" class="headerlink" title="Redis整体的数据结构"></a>Redis整体的数据结构</h3><p><img src="https://github.com/naynayniQAQ/MyImages/blob/main/Redis.jpg?raw=true"></p><h3 id="redis如何扩容？"><a href="#redis如何扩容？" class="headerlink" title="redis如何扩容？"></a>redis如何扩容？</h3><p>扩容的条件：</p><ol><li>没有子进程在做持久化，并且ht[0].used&gt;&#x3D;ht[0].size*1</li><li>子进程在做持久化时，判断ht[0].used&gt;ht[0].size*5<br>扩容：</li><li>new ht_table大小为ht[0].used*2(向上找到2的幂：ht[0].usedx2&#x3D;6，则为8)，把这个new出来的赋值给ht[1]</li><li>将redisIndex标记为可迁移。渐进式迁移。</li><li>当迁移完成后，将ht[0]&#x3D;ht[1]，ht[1]&#x3D;null，redisIndex&#x3D;-1。</li></ol><h3 id="扩容时数据怎么迁移？"><a href="#扩容时数据怎么迁移？" class="headerlink" title="扩容时数据怎么迁移？"></a>扩容时数据怎么迁移？</h3><p>遍历ht[0],ht[1]</p><ol><li>添加key时，判断redisIndex!&#x3D;-1，进行一个Hash桶的迁移。只阻塞这一部分，其他正常运行，还是那么快。</li><li>没有添加Key的情况下通过定时任务进行扩容（定时任务可以配置）也是部分迁移，以桶为依据，</li></ol><h3 id="不同数据类型的value怎么存储？"><a href="#不同数据类型的value怎么存储？" class="headerlink" title="不同数据类型的value怎么存储？"></a>不同数据类型的value怎么存储？</h3><ol><li>String →SDS：Simple Dynamic String 简单动态字符串  <ul><li>为什么不用常规的字符串而要用这个SDS？   <ul><li>SDS包装了字符串类型，有变量长度变量len，可以直接获取字符串长度；而字符串数组就需要遍历。提高了性能。 </li><li>C语言在读取字符串数组遇到’\0’就会终止，后续的数据元素就会丢失。这也是一种二进制层面上的安全。若保存的图片、音频二进制文件中有’\0’，SDS就可以保证文件数据的安全读取。 </li><li>SDS会预先申请预留空间，追加字符的时候不需要扩容。</li></ul></li></ul></li><li>Hash →zipList：压缩列表。可以节省空间，当数据量很大(可以在配置文件配置)的时候会使用Hash表。SDNBBBBBBBBBBBBBBBBB</li><li>List →quickList：用分段思想在每个quickList存储zipList。</li><li>Set →hash表</li><li>Zset →zipList：当数据量达到配置阈值时，会使用SkipList跳表。   <ul><li>跳表是啥？<br>基于二分法思想，分层级(最高32层)，层级越高查询越慢。</li></ul></li></ol><h3 id="过期策略"><a href="#过期策略" class="headerlink" title="过期策略"></a>过期策略</h3><ul><li>两种情况： <ol><li>要用的时候，判断是否过期（惰性、被动）  </li><li>定期清理。可以配置，1000&#x2F;server.HZ。server.hz默认是10。</li></ol></li><li>如何清理： <ol><li>扫描设置了过期时间的key。 </li><li>根据Hash桶的维度，扫到20个key。若每次只获取20个Key，遍历第一个同获取到10个key，但是第二个桶有30个，那么这两个桶的key都会获取到。  </li><li>扫描过期的key，进行删除 </li><li>删除比例超过10%，执行2、3步</li><li>循环16次，会有时间检测，超过直接返回。</li></ol></li></ul><h3 id="淘汰策略"><a href="#淘汰策略" class="headerlink" title="淘汰策略"></a>淘汰策略</h3><p> 内存满了，但是所有的key都没到过期时间。</p><ol><li>ttl：快过期的</li><li>随机</li><li>LRU：长期不使用</li><li>LFU：使用较少的</li><li>OOM：只能读不能写，写的时候会抛出异常<br>这些都是如何运行的？（未完待续……..）</li></ol><h3 id="持久化策略"><a href="#持久化策略" class="headerlink" title="持久化策略"></a>持久化策略</h3><ol><li>RDB快照  <ul><li>自动触发    <ul><li>配置文件，save 900 1  900秒检查一次，如果有key更改则触发RDB     </li><li>关闭服务shutdown     </li><li>flushAll 清空数据会触发创建一个空的RDB文件</li></ul></li><li>手动触发    <ul><li>save    </li><li>bgsave</li></ul></li></ul></li><li>AOF：Append Only File 追加文件   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appendonly no <span class="comment">//默认关闭</span></span><br></pre></td></tr></table></figure>AOF 持久性记录服务器接收到的每个写操作。然后可以在服务器启动时再次重播这些操作，从而重建原始数据集。命令使用与 Redis 协议本身相同的格式进行记录。  <ul><li><p>问题一：每次执行指令都要和磁盘进行IO交互吗？可配置如下    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">appendfsync always <span class="comment">//每次新命令都会附加到 AOF 中</span></span><br><span class="line">appendfsync everysec <span class="comment">//每一秒，可能会丢失一秒的数据</span></span><br><span class="line">appendfsync no  <span class="comment">//不会添加到AOF</span></span><br></pre></td></tr></table></figure></li><li><p>问题二：AOF会不停追加指令，文件会变得越来越大，加载数据就会变慢，如何解决？<br>重写机制：将大文件变小，将AOF存储为RDB文件，什么时候重写？配置如下</p></li></ul></li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto-aof-rewrite-percentage <span class="number">100</span> <span class="comment">//下一次重写为上一次大小的2倍</span></span><br><span class="line">auto-aof-rewrite-min-size 64mb  <span class="comment">//AOF文件大小达到64M</span></span><br></pre></td></tr></table></figure><p>  例如：64mb的AOF文件重写后变成40mb，则当文件从40mb变成80mb时就会触发重写<br>   优点 </p><ul><li>安全性高 </li><li>可读性高</li></ul><p>   缺点  </p><ul><li>恢复慢  </li><li>重写时需要和磁盘二次IO</li></ul><ol start="3"><li>RDB+AOF结合</li></ol><h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><ol><li><p>主从   </p><ul><li>为什么要有主从？    <ul><li>基于主从故障恢复（不能自动恢复）    </li><li>负载（主写重读）减少主库的压力    </li><li>高可用</li></ul></li><li>主从数据如何保持一致？    <ul><li>全量同步<br>从库第一次和主库连接，发送同步数据的指令（携带master、repid、offset、serverCron）主库判断repid是空的或者和自己的不相同，就知道该从库是和自己进行第一次连接，执行bgsave指令生成RDB文件传给从库。包括offset偏移量和repid。    </li><li>增量同步（从库网络波动断开重连）<br>从库发送数据同步指令，主库比较repid和offset，然后在replication__backlog_buffer积压缓存区同步数据。如果积压缓存没有数据，则全量同步。</li></ul></li><li>主从刚切换可能会导致数据丢失<br>主从同步是异步的，如果从库还没将主库的数据同步成功，主库挂了，那数据就丢失了。</li></ul></li><li><p>哨兵Sentinle  </p><ul><li><p>作用   </p><ul><li>监控和通知：sentinle会不断检查master和slave，Sentinle充当Redis客户端的服务发现来源，当集群发生故障转移时，会将最新信息推送给Redis客户端。    </li><li>自动故障转移：如果master故障，sentinle会将一个slave提升为master。当故障实例恢复后也以新的master为主。     </li><li>提供配置</li></ul></li><li><p>如何做到自动故障转移？    </p><ul><li><p>发现故障（服务状态的监控：基于心跳机制检测服务的状态，每隔一秒向集群的每个实例发送ping命令） </p><p><strong>主观下线</strong>：如果某sentinle节点发现某实力未在规定的时间内响应，则认为该实例主观下线；<br><strong>客观下线</strong>：若超过指定数量（quorum）的sentinle都认为该实例主观下线，则该实例客观下线。quorum值在配置文件配置最好超过sentinle实力数量的一半。    </p></li><li><p>选举哪一个slave为新的master    </p><ol><li>断开连接超过一定时间的去除资格      </li><li>可以设置优先级，越小优先级越高，0不参与选举      </li><li>根据偏移量最新的优先，偏移量越大数据越新       </li><li>唯一的runid，越小优先级越高</li></ol></li><li><p>故障转移</p><p>先选举出一个sentinel（一般为先发现主节点宕机的哨兵，由它来给从节点发送指令）       </p><ol><li>sentinle发送slaveof no one，让该节点成为master       </li><li>sentinle广播通知其他slave，开始从新的master同步数据       </li><li>将故障节点标记为slave</li></ol></li></ul></li><li><p>脑裂问题<br>出现两台maser，当恢复之后数据会丢失。     </p><ul><li>如何解决<br>配置文件：写数据时判断主节点必须有多少个从节点</li></ul></li></ul></li><li><p>Cluster<br>数据分片。前面主从和哨兵都没有分片功能。高可用情况下使用。至少三主三从。</p></li></ol><h3 id="数据丢失的场景"><a href="#数据丢失的场景" class="headerlink" title="数据丢失的场景"></a>数据丢失的场景</h3><ol><li>持久化</li><li>淘汰策略</li><li>主从切换</li><li>脑裂</li></ol><h3 id="如何保证redis和db数据一致？"><a href="#如何保证redis和db数据一致？" class="headerlink" title="如何保证redis和db数据一致？"></a>如何保证redis和db数据一致？</h3><h3 id="缓存的三大问题"><a href="#缓存的三大问题" class="headerlink" title="缓存的三大问题"></a>缓存的三大问题</h3><ol><li>雪崩：redis挂了或者是大量的key过期导致所有的请求都会直接去数据库查询。</li><li>穿透：恶意攻击，数据在redis和数据库都不存在，每次都会去数据库查询。</li><li>击穿：单个key过期被大量请求，直接去数据库查询。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程/锁等</title>
      <link href="/2023/09/06/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%BD%9C%E4%B8%9A/"/>
      <url>/2023/09/06/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%BD%9C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><ol><li><p>NEW 创建</p></li><li><p>RUNNABLE 运行</p></li><li><p>WAITING 等待</p></li><li><p>TIMED_WAITING 超时等待</p></li><li><p>BLOCKED 阻塞</p></li><li><p>TERMINATED 结束</p><blockquote><p>线程通过new Thread()创建出来后，就是创建状态。当调用start()方法后进入运行状态。调用wait()方法就会进入无时限等待状态，再调用notify()&#x2F;notifyAll()方法即可再回到运行状态。调用sleep()方法，传入时长参数就进入到有限时的等待状态，当到达时间后转为运行状态。run方法中执行到添加了synchronized关键字的代码块，抢占不到锁就进入到阻塞状态，获得到锁后就会继续运行。当run方法中的代码执行完成后就进入销毁结束状态。</p></blockquote></li></ol><h2 id="多线程demo"><a href="#多线程demo" class="headerlink" title="多线程demo"></a>多线程demo</h2><ol><li><p>继承Thread类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2000</span>; i++) &#123;</span><br><span class="line">            num=num+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ThreadTest</span>().start();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;====&quot;</span>+num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现Runnable接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunnableTest</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2000</span>; i++) &#123;</span><br><span class="line">            num=num+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">RunnableTest</span>()).start();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;====&quot;</span>+num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现Callable接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CallableTest</span>  &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Task</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：&quot;</span> + i);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Task</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(task));</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(task));</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">       <span class="type">ExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">       pool.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">               <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20000</span>; i++) &#123;</span><br><span class="line">                   System.out.println(Thread.currentThread().getName()+<span class="string">&quot;，&quot;</span>+i);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure></li></ol><h2 id="工作中使用到的多线程"><a href="#工作中使用到的多线程" class="headerlink" title="工作中使用到的多线程"></a>工作中使用到的多线程</h2><blockquote><ol><li><p>数据的同步（A库同步至B库）</p></li><li><p>大批量数据导入或导出数据库</p></li></ol></blockquote><h2 id="简述线程池的好处"><a href="#简述线程池的好处" class="headerlink" title="简述线程池的好处"></a>简述线程池的好处</h2><p>　　1 可以降低资源的消耗，通过重复使用已经创建的线程，可以降低创建线程和销毁线程带来的消耗；</p><p>　　2 提高响应速度，当任务到达时，不需要等待线程创建就能立即执行；</p><p>　　3 提高线程的可管理性，线程是稀缺资源，如果无限制的创建和销毁，不光会带来资源的消耗，还会降低系统的稳定性，通过线程池，可以对线程进行统一的分配，调优和监控。</p><h2 id="线程池的核心参数有哪些，分别表示什么意思"><a href="#线程池的核心参数有哪些，分别表示什么意思" class="headerlink" title="线程池的核心参数有哪些，分别表示什么意思?"></a>线程池的核心参数有哪些，分别表示什么意思?</h2><ol><li><p>corePoolSize：核心线程数。在线程池中长期存活的。</p></li><li><p>maximumPoolSize：最大线程数。线程池允许创建的最大线程数量，当线程池的任务队列满了之后，可以创建的最大线程数。</p></li><li><p>keepAliveTime：空闲线程存活时间。</p></li><li><p>TimeUnit：时间单位。</p></li><li><p>BlockingQueue：线程池任务队列。</p></li><li><p>ThreadFactory：创建线程的工厂。</p></li><li><p>RejectedExecutionHandler：拒绝策略。<strong>当线程池的任务超出线程池队列可以存储的最大值之后，执行的策略。</strong> 默认的拒绝策略有以下 4 种：</p><ul><li>AbortPolicy：拒绝并抛出异常。</li><li>CallerRunsPolicy：使用当前调用的线程来执行此任务。</li><li>DiscardOldestPolicy：抛弃队列头部（最旧）的一个任务，并执行当前任务。</li><li>DiscardPolicy：忽略并抛弃当前任务。</li></ul><p>线程池的默认策略是 AbortPolicy 拒绝并抛出异常。</p></li></ol><h2 id="请说出线程池的实现流程"><a href="#请说出线程池的实现流程" class="headerlink" title="请说出线程池的实现流程"></a>请说出线程池的实现流程</h2><h2 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h2><p>AbstractQueuedSynchronizer，在抢占共享资源的过程中，抢不到锁则把线程加入到队列中阻塞，并在队列中有抢占锁和被唤醒的机制。如果抢占到锁，则将共享资源锁定，并在执行完成业务代码后可以唤醒队列中的线程的一种机制。</p><h2 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h2><p>ComparedAndSwap，比较相同后转换。CAS机制获取当前值进行计算，如果当前值没有改变，表示线程没有被占用，直接更新成功，否则，进行重试或者返回成功或者失败</p><p>缺点：1.在极端情况下，CAS的自旋会出现锁饥饿的情况。</p><p>            2. 会产生ABA问题。</p><h2 id="公平锁与非公平锁的区别"><a href="#公平锁与非公平锁的区别" class="headerlink" title="公平锁与非公平锁的区别"></a>公平锁与非公平锁的区别</h2><p>公平锁：多个线程按照申请锁的顺序去获得锁，线程会直接进入队列去排队，永远都是队列的第一位才能得到锁。</p><ul><li>优点：所有的线程都能得到资源，不会饿死在队列中。</li><li>缺点：吞吐量会下降很多，队列里面除了第一个线程，其他的线程都会阻塞，cpu唤醒阻塞线程的开销会很大。</li></ul><p>非公平锁：多个线程去获取锁的时候，会直接去尝试获取，获取不到，再去进入等待队列，如果能获取到，就直接获取到锁。</p><ul><li>优点：可以减少CPU唤醒线程的开销，整体的吞吐效率会高点，CPU也不必取唤醒所有线程，会减少唤起线程的数量。</li><li>缺点：可能导致队列中间的线程一直获取不到锁或者长时间获取不到锁，导致饿死。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程</title>
      <link href="/2023/08/31/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
      <url>/2023/08/31/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><h3 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h3><ol><li>NEW 创建</li><li>RUNNABLE 运行</li><li>WAITING 等待</li><li>TIMED_WAITING 超时等待</li><li>BLOCKED 阻塞</li><li>TERMINATED 结束</li></ol><h3 id="线程状态装换"><a href="#线程状态装换" class="headerlink" title="线程状态装换"></a>线程状态装换</h3><p><img src="https://github.com/Tommmmmmmmmm/pic/blob/main/ThreadStatus.jpg?raw=true"></p><h3 id="如何优雅的停止一个线程"><a href="#如何优雅的停止一个线程" class="headerlink" title="如何优雅的停止一个线程"></a>如何优雅的停止一个线程</h3><ol><li>stop()：已经废弃</li><li>interrupt()：中断信号</li><li>volatile关键字：保证标志在多线程的可见性</li></ol><h3 id="Java内存模型JMM"><a href="#Java内存模型JMM" class="headerlink" title="Java内存模型JMM"></a>Java内存模型JMM</h3><h3 id="Synchronized和Lock的区别"><a href="#Synchronized和Lock的区别" class="headerlink" title="Synchronized和Lock的区别"></a>Synchronized和Lock的区别</h3><ol><li>Synchronized是Java关键字，Lock是一个接口；</li><li>Sychronized会自动释放锁，不能设置超时时间。而Lock需要手动释放锁，可以设置超时时间；</li><li>S是非公平锁，Lock默认是非公平锁，但是可以选择公平锁；</li></ol><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><h3 id="为什么要有ThreadLocal？"><a href="#为什么要有ThreadLocal？" class="headerlink" title="为什么要有ThreadLocal？"></a>为什么要有ThreadLocal？</h3><p>单个线程独占共享资源。</p><h3 id="它解决了什么？"><a href="#它解决了什么？" class="headerlink" title="它解决了什么？"></a>它解决了什么？</h3><p>多线程中的每个线程的共享资源保证线程安全，互不影响。</p><h3 id="怎么解决的？"><a href="#怎么解决的？" class="headerlink" title="怎么解决的？"></a>怎么解决的？</h3><p>set方法对初始值进行更改，get获取值，remove删除。在ThreadLocal中有个一个ThreadLocalMap，key就是ThreadLocal对象，value就是它的值。就是把共享资源作为一个副本保存在map中，并且是线程私有的。</p><h3 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h3><h3 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h3><p>底层用弱引用，GC会回收。</p><h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><p>​        </p>]]></content>
      
      
      <categories>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发 </tag>
            
            <tag> 多线程 </tag>
            
            <tag> ConcurrentHashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sentinle</title>
      <link href="/2023/08/30/Sentinel/"/>
      <url>/2023/08/30/Sentinel/</url>
      
        <content type="html"><![CDATA[<h1 id="一、雪崩问题"><a href="#一、雪崩问题" class="headerlink" title="一、雪崩问题"></a>一、雪崩问题</h1><blockquote><p>微服务之间相互调用，因为调用链中的一个服务故障，引起整个链路都无法访问的情况。</p><p>解决雪崩的方案：</p><ol><li>超时处理：设定超时时间。请求超过一定时间没有响应就返回错误信息，不会无休止等待</li><li>舱壁模式：限定每个业务能使用的线程数，避免好近整个tomcat的资源。线程隔离</li><li>熔断降级：由断路器统计业务执行的异常比例，如果超出阈值则会熔断该业务，拦截访问该业务的一切请求。</li><li>流量控制：限制业务访问的QPS，避免服务因流量的突增而故障。Sentinel。（预防，前面三种是出现异常之后的策略）</li></ol></blockquote><h1 id="二、服务保护技术"><a href="#二、服务保护技术" class="headerlink" title="二、服务保护技术"></a>二、服务保护技术</h1><blockquote><ol><li>Sentinel</li><li>Hystrix</li></ol></blockquote><h1 id="三、Sentinel"><a href="#三、Sentinel" class="headerlink" title="三、Sentinel"></a>三、Sentinel</h1><blockquote><ol><li><p>流控模式</p><p>1.1 直接</p><p>1.2 关联</p><p>1.3 链路</p></li><li><p>流控效果</p><p>2.1 快速失败</p><p>2.2 预热模式</p><p>2.3 排队等待</p></li><li><p>热点参数限流 （统计参数值相同的请求是否超过阈值）</p><p>3.1 只对注解@SentinelResource(“hot”)有效，对springmvc无效</p></li></ol></blockquote><h1 id="四、隔离和降级"><a href="#四、隔离和降级" class="headerlink" title="四、隔离和降级"></a>四、隔离和降级</h1><h1 id="五、分布式事务-seata"><a href="#五、分布式事务-seata" class="headerlink" title="五、分布式事务-seata"></a>五、分布式事务-seata</h1><ol><li><p>理论基础</p><blockquote><ul><li>1.1 CAP定理<ul><li>Consistency（一致性）：用户访问分布式系统的任意节点，得到的数据必须一致。</li><li>Availability（可用性）：用户访问集群中的健康节点，必须得到响应。</li><li>Partition（分区）：分区一定会出现。</li><li>Tolerance（容错）：在集群出现分区时，整个系统也要持续对外提供服务。</li></ul></li><li>1.2 BASE理论<ul><li>Basically Avaliable（基本可用）：分布式系统出现故障时，允许损失部分可用性，即保证核心可用。</li><li>Soft State（软状态）：在一定的时间内，允许出现中间状态，比如临时的状态不一致。</li><li>Eventually Consistent（最终一致性）：虽然无法保证强一致性，但是在软状态结束后，最终达到数据一致。</li></ul></li><li>1.3 分布式事务最大的问题就是各个子事务的一致性问题，因此可以借鉴CAP定理和BASE理论：<ul><li>AP：允许出现数据短暂的不一致</li><li>CP：数据一致后，一起返回</li></ul></li></ul></blockquote></li><li><p>Seata框架</p><blockquote><p>开源的分布式事务解决框架。</p><ul><li>TC-事务协调者：</li><li>TM-事务管理器：</li><li>RM-资源管理器：</li></ul></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch</title>
      <link href="/2023/08/29/ElasticSearch/"/>
      <url>/2023/08/29/ElasticSearch/</url>
      
        <content type="html"><![CDATA[<p>1、创建一个索引库 (类似创建一个表？)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">put /qyyy</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;standard&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;false&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;object&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;keyword&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;keyword&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>2、索引库查询、删除、修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /qyyy  ---查询</span><br><span class="line">DELETE /qyyy  ---删除</span><br><span class="line">PUT /qyyy/_mapping  --修改（添加字段）</span><br><span class="line">&#123;</span><br><span class="line">  &quot;properties&quot;:&#123;</span><br><span class="line">    &quot;age&quot;:&#123;</span><br><span class="line">      &quot;type&quot;:&quot;long&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、添加文档（添加一行数据?）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST /qyyy/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;info&quot;: &quot;又矮又胖又找不到腰&quot;,</span><br><span class="line">  &quot;eamil&quot;: &quot;23497&quot;,</span><br><span class="line">  &quot;name&quot; :&#123;</span><br><span class="line">    &quot;firstName&quot;:&quot;艳艳&quot;,</span><br><span class="line">    &quot;lastName&quot;: &quot;覃&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、文档查询、删除、修改</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET /qyyy/_doc/<span class="number">1</span></span><br><span class="line">DELETE /qyyy/_doc/<span class="number">1</span></span><br><span class="line"></span><br><span class="line">PUT /qyyy/_doc/<span class="number">1</span>  <span class="comment">//全量修改（id不存在则新增）</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;又矮又胖又找不到腰&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;eamil&quot;</span><span class="punctuation">:</span> <span class="string">&quot;55555&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span><span class="string">&quot;艳艳&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;覃&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">POST /qyyy/_update/<span class="number">1</span> <span class="comment">//局部更新(只修改一个字段)</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;eamal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;88888&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>5、DSL查询语法</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">GET /qyyy/_search <span class="comment">//全文检索</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">GET /qyyy/_search <span class="comment">//单个查询</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;all&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">GET /qyyy/_search  <span class="comment">//多个查询</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;multi_match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;又&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;info&quot;</span><span class="punctuation">,</span><span class="string">&quot;name&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2023/08/18/Docker/"/>
      <url>/2023/08/18/Docker/</url>
      
        <content type="html"><![CDATA[<p>Docker </p><p>把程序及其所需要的依赖、环境、配置等打包在一起。</p><p>docker的安装：安装yum→yum install -y docker-ce→关闭防火墙→启动docker→查看状态</p><p>镜像（mysql:5.7）</p><p>自定义镜像：用文件dockerfile，文本文件里面有很多指令， 执行命令docker build</p><p>拉取镜像：去dockerhub拉取，docker pull nginx</p><p>查看镜像：docker images</p><p>删除镜像：docker rmi </p><p>保存镜像到压缩文件tar：docker save -o nginx.tar nginx:latest</p><p>加载一个Tar文件的镜像：docker load -i nginx.tar </p><p>容器：（镜像→docker run)基于镜像创建容器</p><p>Docker run：docker run –name mn -p 80:80 -d nginx</p><p>暂停：docker pause</p><p>暂停恢复运行：docker unpause</p><p>停止：docker stop</p><p>停止恢复运行：docker start</p><p>删除容器：docker rm (-f 强制删除正在运行的容器） docker rm $(docker ps -a -q) 删除所有停止的容器</p><p>查看所有容器：docker ps （-a 包括停止的容器）</p><p>查看容器运行日志：docker logs</p><p>在容器中修改文件：docker exec -it mn bash </p><p>数据卷：容器和数据耦合</p><p>创建数据卷：docker volume create </p><p>将数据卷挂载到容器中：-v </p><p>DockerCompose</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识IoC</title>
      <link href="/2023/02/25/IoC/"/>
      <url>/2023/02/25/IoC/</url>
      
        <content type="html"><![CDATA[<h1 id="IoC是什么？"><a href="#IoC是什么？" class="headerlink" title="IoC是什么？"></a>IoC是什么？</h1><blockquote><p>IOC：Inversion of Control，控制反转。借助于“第三方”实现具有依赖关系的对象之间的解耦，这里的第三方方就是IoC容器。如何实现控制反转？就是在IoC容器运行期间，动态地将某种依赖关系注入到对象之中。就是依赖注入DI（Dependency Injection）。IoC和DI在不同的角度去描述，实际上指的事情是一样的。在Java中实现这一理念用的反射。</p></blockquote><h1 id="Java中如何实现SpringIoC？"><a href="#Java中如何实现SpringIoC？" class="headerlink" title="Java中如何实现SpringIoC？"></a>Java中如何实现SpringIoC？</h1><ol><li><p>在POM文件中引入依赖，spring-context。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>我的Jdk版本是1.8，在引入spring-context时选择最新版本6.0.4后，程序启动会报错。</p><p>&#x2F;Users&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;qyy&#x2F;springIoc&#x2F;ApplicationSpringTest.java:4:35<br>java: 无法访问org.springframework.context.ApplicationContext<br>  错误的类文件: &#x2F;Users&#x2F;program&#x2F;mavenku&#x2F;org&#x2F;springframework&#x2F;spring-context&#x2F;6.0.4&#x2F;spring-context-6.0.4.jar!&#x2F;org&#x2F;springframework&#x2F;context&#x2F;ApplicationContext.class<br>    类文件具有错误的版本 61.0, 应为 52.0<br>    请删除该文件或确保该文件位于正确的类路径子目录中。</p><p>将依赖版本改为5.2.6.RELEASE后，程序正常运行。</p></blockquote></li><li><p>定义实体类Person和Apple，包括无参构造函数。</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Apple</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="keyword">private</span> String origin;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Apple</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTitle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTitle</span><span class="params">(String title)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getOrigin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> origin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOrigin</span><span class="params">(String origin)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.origin = origin;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Apple apple;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Apple <span class="title function_">getApple</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> apple;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApple</span><span class="params">(Apple apple)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.apple = apple;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, apple=&quot;</span> + apple +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>在resources目录下添加applicationContext.xml文件。文件头需要spring的约束，然后就可以在bean标签中设置id以及实体类的位置，对对象属性赋值。</p><blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sweetApple&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qyy.springIoc.Apple&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">value</span>=<span class="string">&quot;红色&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span> <span class="attr">value</span>=<span class="string">&quot;红富士&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;origin&quot;</span> <span class="attr">value</span>=<span class="string">&quot;欧洲&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qyy.springIoc.Person&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Tom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;apple&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sweetApple&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>获取bean容器中的对象。</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationSpringTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ApplicationContext context=<span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath:applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;person&quot;</span>,Person.class);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ol><blockquote><p>通过上述方式可以看到，我们没有使用new关键字，却可以创建出Apple对象，这就是控制反转。把创建对象的主动权交给IoC，在容器运行期间将依赖关系注入到对象中。输出结果：Person{name&#x3D;’Tom’, apple&#x3D;Apple{title&#x3D;’红富士’, color&#x3D;’红色’, origin&#x3D;’欧洲’}}</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>About Thread</title>
      <link href="/2023/01/03/20230103Thread/"/>
      <url>/2023/01/03/20230103Thread/</url>
      
        <content type="html"><![CDATA[<h1 id="线程是什么？"><a href="#线程是什么？" class="headerlink" title="线程是什么？"></a>线程是什么？</h1><blockquote><p>线程就是进程中的一个任务，一个进程可以有多个线程，但是一个线程只能存在在一个进程中。<br>并行：多个线程一起执行，多核CPU同时处理多个线程。<br>并发：多个线程交替运行。单核CPU的时间片交替分配给多个线程，时间是纳秒级别的，因此宏观上看是同时进行的。</p></blockquote><h1 id="Java创建线程-一个继承，两个实现"><a href="#Java创建线程-一个继承，两个实现" class="headerlink" title="Java创建线程(一个继承，两个实现)"></a>Java创建线程(一个继承，两个实现)</h1><h2 id="1-继承Thread类"><a href="#1-继承Thread类" class="headerlink" title="1. 继承Thread类"></a>1. 继承Thread类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Task</span>();</span><br><span class="line">      task.start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Task</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;启动&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-实现Runnable接口"><a href="#2-实现Runnable接口" class="headerlink" title="2.实现Runnable接口"></a>2.实现Runnable接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Task</span>();</span><br><span class="line">    Thread thread=<span class="keyword">new</span> <span class="title class_">Thread</span>(task);</span><br><span class="line">    thread.start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Task</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;启动&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-实现Callable接口"><a href="#3-实现Callable接口" class="headerlink" title="3.实现Callable接口"></a>3.实现Callable接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Task</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">FutureTask</span> <span class="variable">futureTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(task);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Task</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;启动&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="为什么重写了run方法，但是启动线程时却调用了start方法"><a href="#为什么重写了run方法，但是启动线程时却调用了start方法" class="headerlink" title="为什么重写了run方法，但是启动线程时却调用了start方法"></a>为什么重写了run方法，但是启动线程时却调用了start方法</h1><p>使用start，由操作系统的线程调度策略来决定。run方法是一般Java的调用：先被调用就会先执行，后被调用就会后执行。</p><h1 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h1><blockquote><p>1.NEW 创建<br>2.RUNNABLE 运行<br>3.BLOCKED 阻塞<br>4.WAITING 等待<br>5.TIMED_WAITING 超时等待<br>6.TERMINATED 终止</p></blockquote><h1 id="线程同步问题，去加锁解决"><a href="#线程同步问题，去加锁解决" class="headerlink" title="线程同步问题，去加锁解决"></a>线程同步问题，去加锁解决</h1><blockquote><p>1.synchronize 代码块</p></blockquote><h1 id="死锁是怎么产生的"><a href="#死锁是怎么产生的" class="headerlink" title="死锁是怎么产生的"></a>死锁是怎么产生的</h1><blockquote><p>由于资源的交叉引用，锁中嵌套锁。</p></blockquote><h1 id="如何防止死锁"><a href="#如何防止死锁" class="headerlink" title="如何防止死锁"></a>如何防止死锁</h1><blockquote><p>1.减少对公共资源的引用<br>2.使用完后立即释放资源<br>3.增加超时机制</p></blockquote><h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><blockquote><p>由于线程是与CPU关联，对内存使用相关。所以如果无线创建线程，就会导致内存溢出。因此引入了线程池。JUC:Java.Util.Concurrent</p></blockquote><h2 id="JUC提供的四种线程池"><a href="#JUC提供的四种线程池" class="headerlink" title="JUC提供的四种线程池"></a>JUC提供的四种线程池</h2><blockquote><p>1.定长线程池：初始化时就设置了池的容量。<br>2.可缓存线程池：最大容量没有限制，空闲的线程会重复利用。<br>3.单一线程池：只有一个线程。<br>4.周期线程池：定时去创建线程，有频率。</p></blockquote><h1 id="ThreadLocal两大用途"><a href="#ThreadLocal两大用途" class="headerlink" title="ThreadLocal两大用途"></a>ThreadLocal两大用途</h1><blockquote><p>工具类多线程安全问题，虽然可以加锁解决，但是加锁对资源占用大。<br>多赋值场景，如：拦截器获取的用户。只需赋值一次。</p></blockquote><h1 id="使用ThreadLocal的优点"><a href="#使用ThreadLocal的优点" class="headerlink" title="使用ThreadLocal的优点"></a>使用ThreadLocal的优点</h1><h1 id="ThreadLocal主要的四个方法"><a href="#ThreadLocal主要的四个方法" class="headerlink" title="ThreadLocal主要的四个方法"></a>ThreadLocal主要的四个方法</h1><blockquote><p>set<br>innitialValue<br>get<br>remove</p></blockquote><h1 id="Thread、ThreadLocal、ThreadLocalMap"><a href="#Thread、ThreadLocal、ThreadLocalMap" class="headerlink" title="Thread、ThreadLocal、ThreadLocalMap"></a>Thread、ThreadLocal、ThreadLocalMap</h1><blockquote><p>每一个线程Thread 都有ThreadLocalMap 每一个ThreadMap有多个ThreadLocal </p></blockquote><h1 id="使用ThreaLocal需要注意的五点"><a href="#使用ThreaLocal需要注意的五点" class="headerlink" title="使用ThreaLocal需要注意的五点"></a>使用ThreaLocal需要注意的五点</h1><blockquote><p>内存泄漏 ThreadLocalMap的Key是弱引用<br>如果可以不适用ThreadLocal就可以解决问题，那就不使用ThreadLocal</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
